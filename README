SDLx-Tween version 0.01
=======================

SDL Perl XS Tweening Library

STATUS: Starting to be almost ready enough to be somewhat useful

Only built on Linux.


Writing Perl SDL game move handlers is hard. Consider a missile with 3 states:

    - firing - some sprite animation
    - flying towards enemy - need to update its position until it hits enemy
    - exploding - another sprite animation

The move handler for this game object (GOB) is hard to write, because it needs to:

    * update GOB properties
    * you must take into account acceleration and paths in the computation of
      these values
    * you need to set limits of the values, wait for the limits
    * GOBs need to act differently according to their state, so you need to
      manage that as well
    * it all must be very accurate, or animations will miss each other
    * it has to be fast- this code is run per each GOB per each update

SDLx::Tween lib can do some of these things. Instead of writing a move handler,
declare tweens on your GOBs. SDLx::Tween will take over the move handler for
you.

Instead of writing a move handler which updates the position of $my_gob 
from its current position to x=100 in 1 second, you can go:

    SDLx::Tween::Timeline
        ->tween(on => [x => $my_gob], to =>100, t => 1_000)
        ->start;

And SDLx::Tween will setup the correct move handler.

Perl SDL move handlers are rarely a simple linear progression. The tween
library should be able to change GOBs in many ways:

    - tween any property, to a callback, or directly on an array
    - tween a property with several dimensions, e.g. xy position, 4D color space
    - tween xy position not on a line, but on some curve
    - smooth the motion with acceleration/deceleration
    - make the tween bounce, repeat for N cycles or forever
    - delay before/after tweens
    - chain tweens, paralellize tween, e.g start explode tween after reaching target
    - pause/resume/rewind/ffw/reverse/seek tweens, and generaly play with elastic time
      for making the game faster or slower
    - hasten/slow a tween, for example when creeps are suddenly given a speed bonus
    - tween sprite frames, color/opacity/brightness/saturation/hue, volume/pitch,
      spawning, rotation, size, camera position

According to:

    http://en.wikipedia.org/wiki/Tweening

    "In the inbetweening workflow of traditional hand-drawn animation, the
    senior or key artist would draw the keyframes ... and then would hand over
    the scene to his or her assistant the inbetweener who does the rest."

Let SDLx-Tween be your inbetweener.

Cool implementations of the tweening idea to learn from:

    - http://www.greensock.com/tweenlite/
    - http://drawlogic.com/2010/04/11/itween-tweening-and-easing-animation-library-for-unity-3d/
    - http://www.leebyron.com/else/shapetween/


EXAMPLES

    01-circle.pl    - the hello world of tweening, a growing circle
    02-starfield.pl - demo of 4000 concurrent tweens
    03-easing.pl    - demo of all easing functions
    04-paths.pl     - demo of all paths
    05-colors.pl    - demo of color transitions


INSTALLATION

To install this module type the following:

   perl Makefile.PL
   make
   make test
   make install

DEPENDENCIES

This module requires these other modules and libraries:

    SDL
    Moose

COPYRIGHT AND LICENSE

Big thanks to:

    Sam Hocevar, from 14 rue de Plaisance, 75014 Paris, France
    https://raw.github.com/warrenm

For his most excellent AHEasing lib which SDLx-Tween uses for easing
functions. The license is in the tweencee/ dir. It is at:

    https://github.com/warrenm/AHEasing

Check that page for some great info about easing functions.


Copyright (C) 2011 by Ran Eilam

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.




/*
#define SELF_TO_THIS \
    SDLx__Tween this = (SDLx__Tween) SvIV((SV*)SvRV(self))
*/

