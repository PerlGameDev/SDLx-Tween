SDLx-Tween version 0.01
======================

XS tween engine in for SDL Perl.

STATUS: Ready enough to be useful

Only built on Linux so far.

Writing Perl SDL game move handlers is hard. Consider a missile with 3 states:

    - firing - some sprite animation
    - flying towards enemy - need to update its position until it hits enemy
    - exploding - another sprite animation

The move handler for this game object (GOB) is hard to write, because it needs to:

    * update (GOB) properties
    * you must take into account acceleration and paths in the computation of these values
    * you need to set limits of the values, wait for the limits
    * GOBs need to act differently according to their state, so you need to manage that as well
    * it all must be very accurate, or animations will miss each other
    * and it has to be fast- this code is run per each GOB per each update

SDLx::Tween saves you the work of writing move handlers. Instead you declare tweens
on your GOBs. The tweens will update your properties on game updates.

So instead of writing a move handler which updates a $my_gob position from x=0
to x=100 in 1 second, we can write:

    SDLx::Tween::Timeline->tween
        (duration => 1000, from_to => [0, 100], on => [x => $my_gob]);

And SDLx::Tween will setup the correct move handler.

Being able to just tween a property in a linear progression is not enough to
replace all of our move handlers. The tween library provides many other features
to help you declare changes in GOB so you don't have to write move handlers:

    - tween any property, to a callback, or directly on an array
    - tween a property with several dimensions, e.g. xy position, 4D color space
    - tween xy position not on a line, but on some curve
    - smooth the motion with acceleration/deceleration
    - chain tweens, paralellize tween, e.g start explode tween after reaching target
    - make the tween bounce, repeat for N cycles or forever
    - pause/resume/rewind/ffw/reverse/seek tweens, and generaly play with elastic time
      for making the game faster or slower
    - hasten/slow a tween, for example when creeps are suddenly given a speed bonus
    - tween sprite frames, color/opacity/brightness/saturation/hue, volume/pitch,
      spawning, rotation, size, camera position

TODO: syntax sugar above is still unimplemented, current syntax is:

    SDLx::Tween::Timeline->tween(
        duration => 1000,
        from     => 0,
        to       => 100,
        on       => $my_gob,
        set      => 'x',
    );

EXAMPLES

    01-circle.pl       - the hello world of tweening, a growing circle
    02-starfield.pl    - demo of 4000 concurrent tweens
    03-easing.pl       - demo of all easing functions
    04-paths.pl        - demo of all paths

TODO

    - paths
        * bezier
    - easing
        * stepped ease for retro shaky animations    
    - timeline control
        * pause/resume
        * ffw/rewind/seek/elasetic time factor
        * sequence/parallel
    - callback proxy
    - custom tweens
        * color/brightness/opacity
        * sprite animation
        * spawner
        * rotation/scaling
        * position - with distinct int optimization in 2D
        * shape tweening using lots of particles
    - timeline
        * auto connect directly to SDL app
    - docs
    - demos
        * paths
        * add trails to easing demo, make them tween fade
        * follow cursor dynamic properties
        * start/stop of tweens
        * rain falling
    - API features
        * dynamic params
        * delay before/after tween
        * validation should be in validation classes to get rid of all those ifs in constructor    
        * lifecycle events -> start,stop,complete
        * method proxy should not keep strong ref to target
        * speed instead of duration
        * tween group for sequencing
        * sugarize
    - performance
        * share path_args for polylines
        * pool tweens
        * convert doubles to floats
    - accuracy
        * overshoot support
        * chaining tweens passes complete->start cycle times    

INSTALLATION

To install this module type the following:

   perl Makefile.PL
   make
   make test
   make install

DEPENDENCIES

This module requires these other modules and libraries:

    SDL
    Moose

COPYRIGHT AND LICENCE

Put the correct copyright and licence information here.

Copyright (C) 2011 by Ran Eilam

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.

